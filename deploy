#!/usr/bin/env bash
# -*- mode: shell-script -*-

function warn () {
  echo "$PROG: $@" >&2
}

function error () {
  warn "$@"
  exit 1
}

function ts {
  date +%Y%m%dT%H%M%S%z
}

STARTED=$(ts)

INPROGRESS="(in progress)"
FAILED="(failed)"
SUCCESS=

FINISHED="$INPROGRESS"

STATUS="$INPROGRESS"

FIELDSEP='|'

ARGS="$@"
DEBUG=${DEBUG:-false}
REALPATH=${REALPATH:-"$(which realpath 2>/dev/null)"}

if [[ -z $REALPATH ]]; then
  PROG=$( basename $0 )
  error 'cannot find realpath'
fi

SCRIPTPATH="$($REALPATH $0)"
SAVEPATH="$SCRIPTPATH.save"
PROG=$(basename $SCRIPTPATH)
BASEDIR=${BASEDIR:-"$(dirname $SCRIPTPATH)"}
SUPPORTDIR=${SUPPORTDIR-"$(dirname $BASEDIR)"}
VENV=${VENV:-${SUPPORTDIR:+"$SUPPORTDIR/virtualenv"}}
if [[ -z $VENV ]]; then
  error 'no virtualenv available'
fi
REQUIREMENTS=${REQUIREMENTS:-"$BASEDIR/requirements.txt"}

PROGDIR=${PROGDIR-"$BASEDIR/.$PROG"}
LOGFILE=${LOGFILE:-${PROGDIR:+"$PROGDIR/log"}}
LOCKFILE=${LOCKFILE:-${PROGDIR:+"$PROGDIR/lock"}}
ADMINDIR=${ADMINDIR:-${SUPPORTDIR:+"$($REALPATH $SUPPORTDIR/..)/docroot/admin/deploy"}}
INFOFILE=

UMASK=002

PRODSITE=prod
DEVSITE=dev

PRODBRANCH=master
DEVBRANCH=dev
# PRODBRANCH=test-ignore
# DEVBRANCH=test-ignore

URLTEMPLATE='http://%slincs.hms.harvard.edu/cgi-bin/cleanup.cgi'

REMOTE=${REMOTE:-hmslincs}
FULLMODE=false
DEFAULTMODE=true

function update_deploy_info {
  local status="$1"

  local ssh_client=${SSH_CLIENT/ *}
  local rev=$(git log -1 --oneline $BRANCH)
  local s="$FIELDSEP"
  if [[ $status == $INPROGRESS ]]; then
    FINISHED=$status
  else
    FINISHED=$(ts)
    if [[ $status == $FAILED ]]; then
      FINISHED="$FINISHED $FAILED"
    fi
  fi

  local info="$PROG $ARGS$s$USER $UID $ssh_client$s$(hostname) $$$s$STARTED$s$FINISHED$s$rev\n"

  if [[ -n $LOCKFILE ]]; then
    _debug "updating $LOCKFILE"
    printf "$info" >"$LOCKFILE"
  fi

  if [[ -n $INFOFILE ]]; then
    _debug "updating $INFOFILE"
    printf "$info" >"$INFOFILE"
    if [[ -n $INFOFILEBAK && -e $INFOFILEBAK ]]; then
      cat $INFOFILEBAK >>"$INFOFILE"
    fi
  fi
}

function wrapup {

  if [[ $STATUS == $INPROGRESS ]]; then
    STATUS=$FAILED
  fi
  FINISHED=$(ts)
  update_deploy_info "$STATUS"

  if [[ -e $SAVEPATH ]]; then
    _debug "restoring $SAVEPATH"
    mv -f $SAVEPATH $SCRIPTPATH
  fi

  if [[ -n $LOCKFILE ]]; then
    _debug "removing $LOCKFILE ..."
    rm -f $LOCKFILE
  fi
}

function _debug {
  if $DEBUG; then echo "$@"; fi
}

function __usage {
    cat <<EOF
$PROG [-m|-f] [-d] [SITE [BRANCH]]

$PROG -h

  -h -- print this help message and exit
  -m -- minimal update
  -f -- do full update (rebuild db, remake and move images, etc.)
  -d -- debug mode

SITE should be either $PRODSITE or $DEVSITE.  BRANCH should be a suitable
branch from $REMOTE.

Default actions: git-pull, make and move files, kill fast cgi.
EOF
    exit $1
}

function main {
  OPTIND=1
  while getopts ":hmfd" opt "$@"
  do
    case "$opt" in
      h) __usage 0;;
      m) FULLMODE=false
         DEFAULTMODE=false;;
      f) FULLMODE=true
         DEFAULTMODE=true;;
      d) DEBUG=true
         LOGFILE=$(tty);;
      ?) echo "$0: illegal option -- $OPTARG" >&2
         __usage 1;;
    esac
  done

  if [[ -z $LOGFILE ]]; then
    LOGFILE=/dev/null
  fi

  shift $(( OPTIND - 1 ))

  cd "$BASEDIR" || error "can't cd to $BASEDIR"

  SITE="$1"
  BRANCH="$2"

  if [[ -z $SITE ]]; then
    case "$BASEDIR" in
      /www/lincs.*) SITE="$PRODSITE" ;;
                 *) SITE="$DEVSITE" ;;
    esac
  fi

  if [[ -z $BRANCH ]]; then
    if [[ $SITE = $PRODSITE ]]; then
      BRANCH="$PRODBRANCH"
    else
      BRANCH="$DEVBRANCH"
    fi
  fi

  if [[ $SITE = $PRODSITE ]]; then
    KILLFCGI=$(printf "$URLTEMPLATE" "")
  elif [[ $SITE = $DEVSITE ]]; then
    KILLFCGI=$(printf "$URLTEMPLATE" dev.)
  else
    KILLFCGI=
    echo "$SITE is not a supported site: will not run cleanup.cgi"
  fi

  if $DEBUG; then
    cat <<EOF
params:
SITE: $SITE
REMOTE: $REMOTE
BRANCH: $BRANCH
KILLFCGI: $KILLFCGI
EOF

  fi

  deploy || error "failed with status $?"

  return 0
}

function gitpull {
  _debug -n "pulling branch $BRANCH from $REMOTE... "
  cp -a $SCRIPTPATH $SAVEPATH
  git fetch $REMOTE >>"$LOGFILE" 2>&1 || error "git-fetch failed: $?"
  git checkout $BRANCH >>"$LOGFILE" 2>&1 || error "git-checkout failed: $?"
  git checkout -- $SCRIPTPATH >>"$LOGFILE" 2>&1 || error "git-checkout $SCRIPTPATH failed: $?"
  git pull --ff-only $REMOTE $BRANCH >>"$LOGFILE" 2>&1 || error "git-pull failed: $?"
  mv -f $SAVEPATH $SCRIPTPATH
  update_deploy_info "$STATUS"
  _debug 'done'
  return 0
}

function invenv {
  local pyex="$VENV/bin/python"
  if [[ -z $VENV || ! -x $pyex ]]; then
    error "VENV ($VENV) does not point to a valid virtualenv directory"
  fi

  [[ $VIRTUAL_ENV == $VENV && $(which python) == $pyex ]] && \
    python -c 'import sys; sys.real_prefix' 2>/dev/null
}

function maybe_activate_virtualenv {
  if [[ -z $VENV ]]; then
    error 'assertion error'
  fi

  if [[ ! -e $VENV ]]; then
    virtualenv --no-site-packages --distribute $VENV
  fi
  VENV="$($REALPATH $VENV)"

  if invenv; then return; fi

  source "$VENV/bin/activate" || error "failed to activate virtualenv: $?"

  if invenv; then return; fi

  error 'failed to activate virtualenv (reason unknown)'
}

function runpip {
  _debug -n 'updating virtualenv...'

  if [[ ! -e $REQUIREMENTS ]]; then
    error "cannot find requirements file ($REQUIREMENTS)"
  fi

  maybe_activate_virtualenv

  sed 's/^\s*//; s/\s*#.*//' $REQUIREMENTS | \
    while IFS= read -r line; do
      if [[ -z $line ]]; then continue; fi
      pip install -v $line >>"$LOGFILE" || error "pip install $line failed: $?"
    done
  if [[ $? != 0 ]]; then
    exit $?
  fi
  _debug 'done'
}

function builddb {
  if $FULLMODE; then
    _debug -n 'building db... '
    $BASEDIR/re_run.sh $SITE >>"$LOGFILE" 2>&1 || error "re_run.sh failed: $?"
    _debug 'done'
  fi
}

function makeimg {
  if $DEFAULTMODE; then
    _debug -n 'making images... '
    cd "$BASEDIR" || return 1
    src/do_scatterplots.sh >>"$LOGFILE" 2>&1 || \
        error "src/do_scatterplots.sh failed: $?"
    PYTHONPATH="$BASEDIR"/django DJANGO_SETTINGS_MODULE=hmslincs_server.settings \
	python src/do_pathway.py >>"$LOGFILE" 2>&1 || \
        error "src/do_pathway.py failed: $?"
    _debug 'done'
  fi
}

function moveimg {
  _debug -n 'moving images... '
  cd "$BASEDIR" || return 1
  DEBUG=$DEBUG ./find_and_move_restricted_images.sh >>"$LOGFILE" 2>&1 || \
      error "find_and_move_restricted_images.sh failed: $?"
  _debug 'done'
}

function collectstatic {
  if [[ -z $SUPPORTDIR ]]; then return 0; fi
  _debug -n 'collecting statics... '
  cd "$BASEDIR" || return 1
  python django/manage.py collectstatic --noinput >>"$LOGFILE" 2>&1 || \
      error "manage.py collectstatic failed: $?"
  moveimg
  _debug 'done'
}

function killfcgi {
  [[ -z $KILLFCGI ]] && return 0
  _debug -n 'running cleanup.cgi... '
  curl -sf "$KILLFCGI" >> "$LOGFILE" || error '"'"curl -f $KILLFCGI"'" failed'
  _debug 'done'
}

function _mkdir {
  if [[ ! -e $1 ]]; then
    (umask $UMASK && mkdir -p "$1") || error "could not create $1: $?"
  fi
}

function _mkfile {
  if [[ ! -e $1 ]]; then
    (_mkdir $( dirname "$1" ) && umask $UMASK && touch "$1") \
      || error "could not create $1: $?"
  fi
}

function deploy {

  _mkdir $PROGDIR

  if [[ -e $LOCKFILE ]]; then
    error "$LOCKFILE exists:

$(cat $LOCKFILE)

exiting..."
  else
    trap wrapup EXIT
    rm -f $SAVEPATH
    _mkfile "$LOCKFILE"
  fi

  _mkfile "$LOGFILE"

  if [[ -n $ADMINDIR ]]; then
    _mkdir $ADMINDIR
    INFOFILE="$ADMINDIR/info.txt"
    _mkfile $INFOFILE
    INFOFILEBAK="$INFOFILE.bak"
    if [[ -s $INFOFILE ]]; then
      _mkfile $INFOFILEBAK
      sed "s/$INPROGRESS/(???)/" "$INFOFILE" >"$INFOFILEBAK"
    fi
  fi

  update_deploy_info "$STATUS"

  if [[ -s $LOGFILE ]]; then
    cat <<EOF >>"$LOGFILE"

===========================================================================
EOF
  fi

  cat <<EOF >>"$LOGFILE"
$STARTED
deployed by $USER ($UID) connected from $ssh_client


EOF

  maybe_activate_virtualenv
  gitpull && runpip && builddb && collectstatic && killfcgi

  STATUS=$SUCCESS
  echo done
}

main "$@"
